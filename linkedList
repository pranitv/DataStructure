class ListNodes:
    def __init__(self,data):
        self.data = data
        self.next = None
        return
    
    def _hasvalue(self , value):
        if self.data==value:
            return True
        else:
            return False
    

class SingleLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        return
    def add_list_item(self,item):
        if not isinstance(item,ListNodes):
            itsm = ListNodes(item)
        if self.head is None:
            self.head = item
        else:
            self.tail.next = item
        self.tail = item
        return
    
    def list_length(self):
        count = 0
        current_node = self.head
        
        while current_node is not None:
            count = count + 1
            current_node = current_node.next
        return count
    
    def output_list(self):
        current_node = self.head
        while current_node is not None:
            print(current_node.data)
            current_node = current_node.next
        return

node1 =ListNodes(15)
node2 =ListNodes(8.2)
node3 =ListNodes("Berlin")
node4 =ListNodes(15)

track = SingleLinkedList()
print("track length:%i"% track.list_length())
for current_item in [node1,node2,node3,node4]:
    track.add_list_item(current_item)
    print("track length:%i"% track.list_length())
    track.output_list()
    
            
            
